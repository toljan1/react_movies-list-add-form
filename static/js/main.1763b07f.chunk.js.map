{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","valueIsCorrect","useState","Math","random","toString","slice","id","isUrl","touched","setToched","hasError","inValidValue","htmlFor","classNames","type","placeholder","event","preventDefault","currentTarget","onBlur","urlIsValid","NewMovie","onAdd","count","setCount","newMovie","setNewMovie","isDisabled","setIsDisabled","test","onSubmit","prevCount","disabled","App","moviesFromServer","setMovies","prevMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1763b07f.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (name: string, value: string) => void,\n  valueIsCorrect: boolean\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n  valueIsCorrect = false,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const isUrl = name === 'imgUrl' || name === 'imdbUrl';\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n  const inValidValue = isUrl && valueIsCorrect && touched;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => {\n            event.preventDefault();\n            onChange(\n              name, event.currentTarget.value,\n            );\n          }}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {inValidValue && (\n        <p className=\"help is-danger\">{`${label} is incorrect`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  onAdd: (movie: Movie) => void,\n}\n\n// eslint-disable-next-line max-len\nconst urlIsValid = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [newMovie, setNewMovie] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n  const [isDisabled, setIsDisabled] = useState(true);\n  const onChange = (name: string, value: string): void => {\n    setNewMovie({ ...newMovie, [name]: value });\n    const {\n      title,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    } = newMovie;\n\n    const allInputAreValid = title\n      && urlIsValid.test(imgUrl) && urlIsValid.test(imdbUrl) && imdbId;\n\n    if (allInputAreValid) {\n      setIsDisabled(false);\n    }\n  };\n\n  const addMovie = (event: React.FormEvent<HTMLFormElement>): void => {\n    event.preventDefault();\n\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    } = newMovie;\n\n    const movie: Movie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    if (title && imgUrl && imdbUrl && imdbId) {\n      onAdd(movie);\n      setCount(prevCount => prevCount + 1);\n      setNewMovie({\n        title: '',\n        description: '',\n        imgUrl: '',\n        imdbUrl: '',\n        imdbId: '',\n      });\n      setIsDisabled(true);\n    }\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={addMovie}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={newMovie.title}\n        onChange={onChange}\n        required\n        valueIsCorrect\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={newMovie.description}\n        onChange={onChange}\n        valueIsCorrect\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={newMovie.imgUrl}\n        onChange={onChange}\n        required\n        valueIsCorrect={!urlIsValid.test(newMovie.imgUrl)}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={newMovie.imdbUrl}\n        onChange={onChange}\n        required\n        valueIsCorrect={!urlIsValid.test(newMovie.imdbUrl)}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={newMovie.imdbId}\n        onChange={onChange}\n        required\n        valueIsCorrect\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const onAdd = (movie: Movie): void => {\n    setMovies(prevMovies => [\n      ...prevMovies,\n      movie,\n    ]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}